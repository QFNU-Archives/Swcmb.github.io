---
title: C++第4章示例程序
date: 2024-07-07 20:52:33
tags: 曲园
category: CodeWorld
---

### 4.2

```c++
 #include<iostream>
using namespace std;
class  Complex{
public:
	Complex(){real=0;imag=0;}
	Complex(double r,double i){real=r;imag=i;}
	Complex operator+(Complex &c2);
	void display();
private:
	double real;
	double imag;
};
Complex Complex::operator+(Complex &c2)
{
	Complex c;
	c.real=real+c2.real;
	c.imag=imag+c2.imag;
	return c;
}
void Complex::display()
{
	cout<<"("<<real<<","<<imag<<"i)"<<endl;
}
int main()
{
	Complex c1(3,4),c2(5,-10),c3;
	c3=c1+c2;
	cout<<"c1=";c1.display();
	cout<<"c2=";c2.display();
	cout<<"c1+c2=";c3.display();
	return 0;
}
```

### 4.3

```C++
#include<iostream>
using namespace std;
class  Complex{
public:
	Complex(){real=0;imag=0;}
	Complex(double r,double i){real=r;imag=i;}
	friend Complex operator+(Complex &c1,Complex &c2);
	void display();
private:
	double real;
	double imag;
};
Complex operator+(Complex &c1,Complex &c2)
{
	return Complex(c1.real+c2.real,c1.imag+c2.imag);
}
void Complex::display()
{
	cout<<"("<<real<<","<<imag<<"i)"<<endl;
}
int main()
{
	Complex c1(3,4),c2(5,-10),c3;
	c3=c1+c2;
	cout<<"c1=";c1.display();
	cout<<"c2=";c2.display();
	cout<<"c1+c2=";c3.display();
	return 0;
}

```

### 4.5

```C++
#include<iostream>
#include<string.h>
using namespace std;
class String {
public:
	String(){p=NULL;}
	String(char *str);
	friend bool operator>(String &string1,String &string2);
	friend bool operator<(String &string1,String &string2);
	friend bool operator==(String &string1,String &string2);
	void display();
private:
	char *p;
};
String::String(char *str)
{
	p=str;
}
void String::display()
{
	cout<<p;
}
bool operator>(String &string1,String &string2)
{
	if(strcmp(string1.p,string2.p)>0)
	{return true;}
	else
	{return false;}
}
bool operator<(String &string1,String &string2)
{
	if(strcmp(string1.p,string2.p)<0)
	{return true;}
	else
	{return false;}
}
bool operator==(String &string1,String &string2)
{
	if(strcmp(string1.p,string2.p)==0)
	{return true;}
	else
	{return false;}
}
void compare(String &string1,String &string2)
{
	if(operator>(string1,string2)==1){
		string1.display();cout<<"<";string2.display();
	}
	else{
		if(operator<(string1,string2)==1){
			string2.display();cout<<"<";string1.display();
		}
		else{
			if(operator==(string1,string2)==1){
				string1.display();cout<<"==";string2.display();
			}
		}
	}
	cout<<endl;
}
int main()
{
	String string1("Hello"),string2("Book"),string3("Computer"),string4("Hello");
	compare(string1,string2);
	compare(string2,string3);
	compare(string1,string4);
	return 0;
}
```

### 4.6

```C++
#include<iostream>
using namespace std;
class Time{
public:
	Time(){minute=0;sec=0;}
	Time(int m,int s):minute(m),sec(s){}
	Time operator++();
	Time operator++(int);
	void display(){cout<<minute<<":"<<sec<<endl;}
private:
	int minute;
	int sec;
};
Time Time::operator++()
{
	if(++sec>=60){
		sec-=60;
		++minute;
	}
	return *this;//返回自加后的当前对象
}
Time Time::operator++(int)
{
	Time temp(*this);
	if(++sec>=60){
		sec-=60;
		++minute;
	}
	return temp;//返回自加后的当前对象
}
int main()
{
	Time time1(34,59),time2;
	cout<<"time1:";time1.display();
	++time1;
	cout<<"++time1:";time1.display();
	time2=time1++;
	cout<<"time1++:";time1.display();
	cout<<"time2:";time2.display();
	return 0;
}
```

### 4.8

```C++
#include<iostream>
using namespace std;
class Complex{
public:
	friend ostream& operator<<(ostream&,Complex&);
	friend istream& operator>>(istream&,Complex&);
private:
	double real;
	double imag;
};
ostream& operator<<(ostream& output,Complex& c)
{
	output<<"("<<c.real<<"+"<<c.imag<<"i)";
	return output;
}
istream& operator>>(istream& input,Complex& c)
{
	cout<<"input real part and imaginary part of complex number:";
	input>>c.real>>c.imag;
	return input;
}
int main()
{
	Complex c1,c2;
	cin>>c1>>c2;
	cout<<"C1="<<c1<<endl;
	cout<<"c2="<<c2<<endl;
	return 0;
}
```



```C++
#include<iostream>
using namespace std;
class Complex{
public:
	friend ostream& operator<<(ostream&,Complex&);
	friend istream& operator>>(istream&,Complex&);
private:
	double real;
	double imag;
};
ostream& operator<<(ostream& output,Complex& c)
{
	output<<"("<<c.real;
	if(c.imag>0){
		output<<"+";
	}output<<c.imag<<"i)";
	return output;
}
istream& operator>>(istream& input,Complex& c)
{
	cout<<"input real part and imaginary part of complex number:";
	input>>c.real>>c.imag;
	return input;
}
int main()
{
	Complex c1,c2;
	cin>>c1>>c2;
	cout<<"c1="<<c1<<endl;
	cout<<"c2="<<c2<<endl;
	return 0;
}
```

### 4.9

```C++
#include<iostream>
using namespace std;
class Complex {
public:
	Complex(){real=0;imag=0;}
	Complex(double r,double i){real=r;imag=i;}
	operator double(){return real;}
private:
	double real;
	double imag;
};
int main()
{
	Complex c1(3,4),c2(5,-10),c3;
	double d;
	d=2.5+c1;
	cout<<d<<endl;
	return 0;
}
```

### 4.10

```C++
#include<iostream>
using namespace std;
class Complex {
public:
	Complex(){real=0;imag=0;}
	Complex(double r){real=r;imag=0;} // 修改构造函数，使得实部为r，虚部为0
	Complex(double r,double i){real=r;imag=i;}
	friend Complex operator+(Complex c1,Complex c2);
	void display();
	operator double(){return real;} // 将复数转换为实数时返回实部
private:
	double real;
	double imag;
};
Complex operator+(Complex c1,Complex c2)
{
	return Complex(c1.real+c2.real,c1.imag+c2.imag);
}
void Complex::display()
{
	cout<<"("<<real<<","<<imag<<"i)"<<endl;
}
int main()
{
	Complex c1(3,4),c2(5,-10),c3;
	c3 = c1 + c2; // 修改运算符重载，使得c3等于c1和c2的和
	c3.display();
	return 0;
}

```

